// <auto-generated />
using System;
using API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(SksDbContext))]
    [Migration("20241204181118_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Place")
                        .HasColumnType("longtext");

                    b.Property<string>("Responsible")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasDiscriminator().HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("API.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PrepId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PrepId")
                        .IsUnique();

                    b.HasIndex("SpecialityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("API.Models.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("API.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("API.Models.Timetable", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Time_start")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly>("Time_end")
                        .HasColumnType("time(6)");

                    b.HasKey("GroupId", "EventId", "Date", "Time_start");

                    b.HasIndex("EventId");

                    b.ToTable("Timetable");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SpecialitySubject", b =>
                {
                    b.Property<Guid>("SpecialitiesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectsId")
                        .HasColumnType("char(36)");

                    b.HasKey("SpecialitiesId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("SpecialitySubject");
                });

            modelBuilder.Entity("API.Models.Ekz", b =>
                {
                    b.HasBaseType("API.Models.Event");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.HasIndex("SubjectId");

                    b.HasDiscriminator().HasValue("Ekz");
                });

            modelBuilder.Entity("API.Models.Lesson", b =>
                {
                    b.HasBaseType("API.Models.Event");

                    b.Property<Guid>("PrepId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.HasIndex("PrepId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Events", t =>
                        {
                            t.Property("SubjectId")
                                .HasColumnName("Lesson_SubjectId");
                        });

                    b.HasDiscriminator().HasValue("Lesson");
                });

            modelBuilder.Entity("API.Models.Mera", b =>
                {
                    b.HasBaseType("API.Models.Event");

                    b.HasDiscriminator().HasValue("Mera");
                });

            modelBuilder.Entity("API.Models.Admin", b =>
                {
                    b.HasBaseType("API.Models.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("API.Models.Prep", b =>
                {
                    b.HasBaseType("API.Models.User");

                    b.HasDiscriminator().HasValue("Prep");
                });

            modelBuilder.Entity("API.Models.Stud", b =>
                {
                    b.HasBaseType("API.Models.User");

                    b.Property<Guid?>("GroupId1")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GruppaId")
                        .HasColumnType("char(36)");

                    b.HasIndex("GroupId1");

                    b.HasDiscriminator().HasValue("Stud");
                });

            modelBuilder.Entity("API.Models.Group", b =>
                {
                    b.HasOne("API.Models.Prep", "Prep")
                        .WithOne("Group")
                        .HasForeignKey("API.Models.Group", "PrepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Speciality", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prep");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("API.Models.Timetable", b =>
                {
                    b.HasOne("API.Models.Event", "Event")
                        .WithMany("Timetables")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.Group", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("SpecialitySubject", b =>
                {
                    b.HasOne("API.Models.Speciality", null)
                        .WithMany()
                        .HasForeignKey("SpecialitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Ekz", b =>
                {
                    b.HasOne("API.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("API.Models.Lesson", b =>
                {
                    b.HasOne("API.Models.Prep", "Prep")
                        .WithMany("Lessons")
                        .HasForeignKey("PrepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prep");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("API.Models.Stud", b =>
                {
                    b.HasOne("API.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId1");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("API.Models.Event", b =>
                {
                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("API.Models.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Models.Speciality", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("API.Models.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("API.Models.Prep", b =>
                {
                    b.Navigation("Group");

                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
